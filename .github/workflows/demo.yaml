on:
  push:
    branches:
      - main
  pull_request:

jobs:
  demo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.1.9"
      - id: fmt
        run: terraform fmt -check
      - id: init
        run: terraform init
      - id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - run: |
          echo "${{ ! contains(steps.plan.outputs.stdout, 'No changes.') }}"
          echo "----"
          echo "${{ steps.plan.outputs.stdout }}"


      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && ! contains(steps.plan.outputs.stdout, 'No changes. Your infrastructure matches the configuration')
        run: terraform apply -auto-approve -input=false
